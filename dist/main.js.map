{"version":3,"file":"main.js","mappings":"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","sources":["webpack://battleship/./src/js/Gameboard.js","webpack://battleship/./src/js/Player.js","webpack://battleship/./src/js/Ship.js","webpack://battleship/./src/js/game.js","webpack://battleship/./src/js/GameController.js","webpack://battleship/./src/js/Computer.js","webpack://battleship/./src/js/dom.js","webpack://battleship/./src/js/index.js"],"sourcesContent":["export default class Gameboard {\n  #board;\n  #isShipHit;\n\n  constructor() {\n    this.#board = this.#initGameBoard();\n    this.#isShipHit = null;\n    this.ships = [];\n  }\n\n  #initGameBoard() {\n    const length = 10;\n    return new Array(length).fill().map(() => new Array(length).fill(\"empty\"));\n  }\n\n  placeShip(ship, positions) {\n    if (positions.some(([y, x]) => this.#board[y][x] !== \"empty\")) return;\n\n    positions.forEach(([y, x]) => (this.#board[y][x] = ship.class));\n    this.ships.push(ship);\n  }\n\n  receiveAttack(position) {\n    const [y, x] = position;\n\n    if (this.#board[y][x] === \"empty\") {\n      this.#board[y][x] = \"miss\";\n      this.#isShipHit = false;\n      return;\n    }\n\n    for (const ship of this.ships) {\n      if (this.#board[y][x] === ship.class) {\n        const hit = `!${ship.class}`;\n\n        this.#board[y][x] = hit;\n        this.#isShipHit = true;\n\n        ship.hit();\n      }\n    }\n  }\n\n  isAllShipsSunk() {\n    return this.ships.every((ship) => ship.isSunk());\n  }\n\n  get remainingShips() {\n    return this.ships.filter((ship) => !ship.isSunk()).length;\n  }\n\n  get isShipHit() {\n    return this.#isShipHit;\n  }\n\n  get board() {\n    return this.#board;\n  }\n}\n","export default class Player {\n  constructor(name, gameboard) {\n    this.name = name;\n    this.gameboard = gameboard;\n  }\n}\n","export default class Ship {\n  constructor(size, classOfShip) {\n    this.size = size;\n    this.hits = 0;\n    this.class = classOfShip;\n  }\n\n  hit() {\n    if (!this.isSunk()) this.hits++;\n  }\n\n  isSunk() {\n    return this.size === this.hits;\n  }\n}\n","import GameController from \"./GameController.js\";\nimport Gameboard from \"./Gameboard.js\";\nimport Player from \"./Player.js\";\nimport Ship from \"./Ship.js\";\n\nexport const shipInfo = [\n  { class: \"Carrier\", size: 5 },\n  { class: \"Battleship\", size: 4 },\n  { class: \"Destroyer\", size: 3 },\n  { class: \"Submarine\", size: 3 },\n  { class: \"Patrol Boat\", size: 2 },\n];\nexport const gameController = new GameController();\nexport const playerBoards = { player: initGameboard(), computer: initGameboard() };\n\nplaceShipsRandom(playerBoards.player, createShips(shipInfo));\nplaceShipsRandom(playerBoards.computer, createShips(shipInfo));\n\nfunction initPlayer(name, gameboard) {\n  return new Player(name, gameboard);\n}\n\nexport function initGameboard() {\n  return new Gameboard();\n}\n\nexport function createShips(shipInfo) {\n  return shipInfo.map((ship) => new Ship(ship.size, ship.class));\n}\n\nexport function setPlayers() {\n  const player = initPlayer(\"player\", playerBoards.player);\n  const computer = initPlayer(\"computer\", playerBoards.computer);\n\n  gameController.setPlayer(player);\n  gameController.setPlayer(computer);\n  playerBoards.player = null;\n  playerBoards.computer = null;\n}\n\nexport function placeShipsRandom(gameboard, ships) {\n  const boardSize = 10;\n  const positions = generatePositions(boardSize, ships);\n\n  for (let i = 0; i < positions.length; i++) gameboard.placeShip(ships[i], positions[i]);\n}\n\nexport function getPossiblePositions(boardSize) {\n  const map = new Map();\n\n  for (let i = 0; i < boardSize * boardSize; i++) {\n    const [y, x] = [i % boardSize, Math.floor(i / boardSize)];\n    map.set(`${y}, ${x}`, [y, x]);\n  }\n\n  return map;\n}\n\nexport function generateRandomPosition(availablePositions) {\n  const values = Array.from(availablePositions.values());\n  return values[Math.floor(Math.random() * values.length)];\n}\n\nfunction getRandomStartingPosition(availablePositions, shipSize, boardSize) {\n  let y, x;\n\n  do {\n    [y, x] = generateRandomPosition(availablePositions);\n    if (y + shipSize > boardSize || x + shipSize > boardSize) continue;\n  } while (\n    !availablePositions.has(`${y + shipSize}, ${x}`) ||\n    !availablePositions.has(`${y}, ${x + shipSize}`)\n  );\n\n  return [y, x];\n}\n\nexport function removeAdjacentSlots(availablePositions, position) {\n  const adjacentSlots = getAdjacentSlots(availablePositions, position);\n\n  for (const [y, x] of adjacentSlots) availablePositions.delete(`${y}, ${x}`);\n}\n\nfunction getAdjacentSlots(availablePositions, position) {\n  const directions = [\n    [-1, 0],\n    [1, 0],\n    [0, -1],\n    [0, 1],\n  ];\n  const adjacentSlots = [];\n\n  for (const direction of directions) {\n    const [y, x] = [direction[0] + position[0], direction[1] + position[1]];\n\n    if (availablePositions.has(`${y}, ${x}`)) adjacentSlots.push([y, x]);\n  }\n\n  return adjacentSlots;\n}\n\nfunction generatePositions(boardSize, ships) {\n  const availablePositions = getPossiblePositions(boardSize);\n  const positions = []; // positions for all ships\n\n  for (const ship of ships) {\n    const shipPositions = [];\n    const [y, x] = getRandomStartingPosition(availablePositions, ship.size, boardSize);\n\n    for (let i = 0; i < ship.size; i++) {\n      if (y < x) {\n        shipPositions.push([y, x + i]);\n        availablePositions.delete(`${y}, ${x + i}`);\n      } else {\n        shipPositions.push([y + i, x]);\n        availablePositions.delete(`${y + i}, ${x}`);\n      }\n    }\n\n    for (const [y, x] of shipPositions) removeAdjacentSlots(availablePositions, [y, x]);\n\n    positions.push(shipPositions);\n  }\n\n  return positions;\n}\n","export default class GameController {\n  #players;\n  #activePlayer;\n  #isGameOver;\n  #winner;\n\n  constructor() {\n    this.#players = [];\n    this.#activePlayer = null;\n    this.#isGameOver = false;\n    this.#winner = null;\n  }\n\n  setPlayer(player) {\n    if (this.#players.length === 2) return;\n    this.#players.push(player);\n    this.#setActivePlayer(player);\n  }\n\n  reset() {\n    this.#players = [];\n    this.#activePlayer = null;\n    this.#isGameOver = false;\n    this.#winner = null;\n  }\n\n  #setActivePlayer(player) {\n    if (this.#players.length > 1) return;\n    this.#activePlayer = player;\n  }\n\n  #switchPlayerTurn() {\n    this.#activePlayer =\n      this.#activePlayer === this.#players[0] ? this.#players[1] : this.#players[0];\n  }\n\n  playTurn(position) {\n    const opponent = this.#activePlayer === this.#players[0] ? this.#players[1] : this.#players[0];\n\n    opponent.gameboard.receiveAttack(position);\n\n    this.#setWinner(this.#activePlayer.name);\n    this.#setIsGameOver(opponent.gameboard.isAllShipsSunk());\n    this.#switchPlayerTurn();\n  }\n\n  #setWinner(name) {\n    this.#winner = name;\n  }\n\n  #setIsGameOver(value) {\n    this.#isGameOver = value;\n  }\n\n  get activePlayer() {\n    return this.#activePlayer;\n  }\n\n  get winner() {\n    if (this.#isGameOver) return this.#winner;\n    return null;\n  }\n\n  get isGameOver() {\n    return this.#isGameOver;\n  }\n}\n","import { getPossiblePositions, generateRandomPosition, removeAdjacentSlots } from \"./game.js\";\n\nclass Computer {\n  #boardSize;\n  #positions;\n  #adjacentSlots;\n  #attackOrientation;\n  #lastAttack;\n  #hitPositions;\n  #playerShipCount;\n  #directions;\n\n  constructor() {\n    this.#boardSize = 10;\n    this.#positions = getPossiblePositions(this.#boardSize);\n    this.#adjacentSlots = [];\n    this.#hitPositions = [];\n    this.#attackOrientation = null;\n    this.#lastAttack = { isHit: null, position: null };\n    this.#playerShipCount = { previous: null, current: null };\n    this.#directions = [\n      [\"vertical\", [-1, 0]],\n      [\"vertical\", [1, 0]],\n      [\"horizontal\", [0, -1]],\n      [\"horizontal\", [0, 1]],\n    ];\n  }\n\n  set isLastAttackHit(value) {\n    this.#lastAttack.isHit = value;\n  }\n\n  set playersCurrentShipCount(value) {\n    this.#playerShipCount.previous = this.#playerShipCount.current;\n    this.#playerShipCount.current = value;\n  }\n\n  get target() {\n    if (this.#lastAttack.isHit) {\n      this.#hitPositions.push(this.#lastAttack.position);\n      this.#findAdjacentSlots();\n    }\n\n    if (this.#isPlayerShipSunk()) {\n      this.#removeAdjacentSlots();\n      this.#resetTarget();\n    }\n\n    if (this.#hitPositions.length > 1) this.#setAttackOrientation();\n\n    if (this.#adjacentSlots.length) return this.#targetAdjacentSlot();\n\n    return this.#targetRandomSlot();\n  }\n\n  reset() {\n    this.#positions = getPossiblePositions(this.#boardSize);\n    this.#lastAttack = { isHit: null, position: null };\n    this.#playerShipCount = { previous: null, current: null };\n    this.#resetTarget();\n  }\n\n  #targetRandomSlot() {\n    const [y, x] = generateRandomPosition(this.#positions);\n    this.#deletePosition(y, x);\n    this.#setLastAttackPosition(y, x);\n\n    return [y, x];\n  }\n\n  #targetAdjacentSlot() {\n    let [y, x] = this.#adjacentSlots[0][1];\n\n    for (let i = 0; i < this.#adjacentSlots.length; i++) {\n      if (!this.#attackOrientation) break;\n\n      if (this.#adjacentSlots[i][0] === this.#attackOrientation) {\n        [y, x] = this.#adjacentSlots[i][1];\n        this.#adjacentSlots = this.#adjacentSlots.slice(i);\n        break;\n      }\n    }\n\n    this.#deletePosition(y, x);\n    this.#setLastAttackPosition(y, x);\n\n    return this.#adjacentSlots.shift()[1];\n  }\n\n  #resetTarget() {\n    this.#attackOrientation = null;\n    this.#hitPositions = [];\n    this.#adjacentSlots = [];\n  }\n\n  #deletePosition(y, x) {\n    this.#positions.delete(`${y}, ${x}`);\n  }\n\n  #removeAdjacentSlots() {\n    for (const position of this.#hitPositions) removeAdjacentSlots(this.#positions, position);\n  }\n\n  #setAttackOrientation() {\n    const [y1, x1] = this.#hitPositions[0];\n    const [y2, x2] = this.#hitPositions[1];\n\n    for (const [orientation, [dy, dx]] of this.#directions) {\n      if (y1 - y2 === dy || x1 - x2 === dx) {\n        this.#attackOrientation = orientation;\n\n        break;\n      }\n    }\n  }\n\n  #isPlayerShipSunk() {\n    return this.#playerShipCount.previous > this.#playerShipCount.current;\n  }\n\n  #setLastAttackPosition(y, x) {\n    this.#lastAttack.position = [y, x];\n  }\n\n  #findAdjacentSlots() {\n    const [y, x] = this.#lastAttack.position;\n\n    for (const [orientation, [dy, dx]] of this.#directions)\n      if (this.#positions.has(`${y + dy}, ${x + dx}`))\n        this.#adjacentSlots.push([orientation, [y + dy, x + dx]]);\n  }\n}\n\nconst computer = new Computer();\nexport default computer;\n","import computer from \"./Computer.js\";\nimport {\n  gameController,\n  playerBoards,\n  setPlayers,\n  initGameboard,\n  placeShipsRandom,\n  createShips,\n  shipInfo,\n} from \"./game.js\";\n\nrenderGameboard(playerBoards.player, \"player\");\n\nexport function buttonClickHandler(e) {\n  if (e.target.type !== \"button\") return;\n\n  const dataset = Object.keys(e.target.dataset)[0];\n\n  if (dataset === \"start\") startGame();\n  if (dataset === \"shuffle\") shuffle();\n  if (dataset === \"restart\") restart();\n}\n\nexport function boardClickHandler(e) {\n  if (!e.target.matches(\".slot\") || gameController.activePlayer.name !== \"player\") return;\n\n  const position = e.target.dataset.position;\n\n  playerAction(position.split(\"\"));\n  if (gameController.isGameOver) displayWinner(gameController.winner);\n  computerAction();\n  if (gameController.isGameOver) displayWinner(gameController.winner);\n}\n\nfunction shuffle() {\n  playerBoards.player = initGameboard();\n  placeShipsRandom(playerBoards.player, createShips(shipInfo));\n  removeChildElements(document.querySelector(\".player\"));\n  renderGameboard(playerBoards.player, \"player\");\n}\n\nfunction startGame() {\n  renderGameboard(playerBoards.computer, \"computer\");\n  setPlayers();\n\n  toggleHideClass(\"#buttons\"); // add\n  toggleHideClass(\"#computerBoard\"); // remove\n}\n\nfunction restart() {\n  gameController.reset();\n  computer.reset();\n\n  toggleHideClass(\".popup\"); // add\n  toggleHideClass(\"#computerBoard\"); // add\n\n  playerBoards.player = initGameboard();\n  playerBoards.computer = initGameboard();\n  placeShipsRandom(playerBoards.player, createShips(shipInfo));\n  placeShipsRandom(playerBoards.computer, createShips(shipInfo));\n\n  removeChildElements(document.querySelector(\"#playerBoard\"));\n  removeChildElements(document.querySelector(\"#computerBoard\"));\n\n  renderGameboard(playerBoards.player, \"player\");\n}\n\nfunction renderGameboard(gameboard, player) {\n  const slots = createGameboardElements(gameboard, player);\n  document.querySelector(`.${player}`).appendChild(slots);\n}\n\nfunction createGameboardElements(gameboard, player) {\n  const fragment = document.createDocumentFragment();\n  // i, j = index number\n  gameboard.board.forEach((slots, i) =>\n    slots.forEach((slot, j) => {\n      slot = slot.toLowerCase().replace(\" \", \"-\");\n\n      const div = document.createElement(\"div\");\n\n      div.dataset.position = `${i}${j}`;\n      if (slot[0] === \"!\") div.classList.add(\"hit\");\n      else div.classList.add(slot, player, \"slot\");\n\n      fragment.appendChild(div);\n    }),\n  );\n\n  return fragment;\n}\n\nfunction removeChildElements(parentElement) {\n  while (parentElement.firstChild) parentElement.firstChild.remove();\n}\n\nfunction playerAction(position) {\n  gameController.playTurn(position);\n\n  removeChildElements(document.querySelector(\"#computerBoard\"));\n  renderGameboard(gameController.activePlayer.gameboard, \"computer\");\n}\n\nfunction computerAction() {\n  gameController.playTurn(computer.target);\n  computer.isLastAttackHit = gameController.activePlayer.gameboard.isShipHit;\n  computer.playersCurrentShipCount = gameController.activePlayer.gameboard.remainingShips;\n\n  removeChildElements(document.querySelector(\"#playerBoard\"));\n  renderGameboard(gameController.activePlayer.gameboard, \"player\");\n}\n\nfunction displayWinner(winner) {\n  toggleHideClass(\"#buttons\"); // remove\n  toggleHideClass(\".popup\"); // remove\n  document.querySelector(\".winner\").textContent = winner;\n}\n\nfunction toggleHideClass(element) {\n  document.querySelector(element).classList.toggle(\"hide\");\n}\n","import { buttonClickHandler, boardClickHandler } from \"./dom.js\";\nimport \"../style.css\";\n\ndocument.querySelector(\"#buttons\").addEventListener(\"click\", buttonClickHandler);\ndocument.querySelector(\"#computerBoard\").addEventListener(\"click\", boardClickHandler);\n"],"names":["Gameboard","constructor","this","ships","Array","fill","map","placeShip","ship","positions","some","y","x","forEach","class","push","receiveAttack","position","hit","isAllShipsSunk","every","isSunk","remainingShips","filter","length","isShipHit","board","Player","name","gameboard","Ship","size","classOfShip","hits","shipInfo","gameController","setPlayer","player","reset","playTurn","opponent","value","activePlayer","winner","isGameOver","playerBoards","initGameboard","computer","initPlayer","createShips","placeShipsRandom","boardSize","availablePositions","getPossiblePositions","shipPositions","getRandomStartingPosition","i","delete","removeAdjacentSlots","generatePositions","Map","Math","floor","set","generateRandomPosition","values","from","random","shipSize","has","adjacentSlots","directions","direction","getAdjacentSlots","isHit","previous","current","isLastAttackHit","playersCurrentShipCount","target","slice","shift","y1","x1","y2","x2","orientation","dy","dx","renderGameboard","slots","fragment","document","createDocumentFragment","slot","j","toLowerCase","replace","div","createElement","dataset","classList","add","appendChild","createGameboardElements","querySelector","removeChildElements","parentElement","firstChild","remove","displayWinner","toggleHideClass","textContent","element","toggle","addEventListener","e","type","Object","keys","setPlayers","matches","split"],"sourceRoot":""}